name: Build and Security Analysis

on:
  push:
    branches: [main]

jobs:
  build-and-analyze:
    name: Build, SonarQube Scan + Security Report
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://devsecops.ngrok.app

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install and Run OWASP Dependency-Check
        shell: pwsh
        run: |
          # Téléchargement et installation automatique
          Write-Output "Téléchargement de Dependency-Check..."
          $downloadUrl = "https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-12.1.0-release.zip"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "dependency-check.zip"
          
          Write-Output "Décompression..."
          Expand-Archive -Path "dependency-check.zip" -DestinationPath "dependency-check" -Force
          
          # Vérification de l'installation
          if (-not (Test-Path ".\dependency-check\bin\dependency-check.bat")) {
              Write-Error "Échec de l'installation de Dependency-Check"
              Get-ChildItem -Recurse ".\dependency-check"
              exit 1
          }

          # Exécution de l'analyse
          Write-Output "Lancement de l'analyse de sécurité..."
          .\dependency-check\bin\dependency-check.bat `
            --project "${{ github.repository }}" `
            --scan . `
            --format HTML `
            --format JSON `
            --out ./security-reports/ `
            --disableYarnAudit `
            --disableNodeAudit

          # Vérification du rapport
          if (-not (Test-Path "./security-reports/dependency-check-report.json")) {
              Write-Error "Le rapport n'a pas été généré"
              exit 1
          }

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            ./security-reports/dependency-check-report.html
            ./security-reports/dependency-check-report.json

      - name: Check for Critical CVEs
        shell: pwsh
        run: |
          $reportPath = "./security-reports/dependency-check-report.json"
          $reportData = Get-Content $reportPath | ConvertFrom-Json
          $criticalCount = ($reportData.dependencies | Where-Object {
              $_.vulnerabilities.severity -contains "CRITICAL"
          }).Count
          
          if ($criticalCount -gt 0) {
              Write-Output "::error::Nombre de vulnérabilités CRITIQUES détectées: $criticalCount"
              exit 1
          }
          Write-Output "Aucune vulnérabilité critique trouvée - Validation réussie!"
